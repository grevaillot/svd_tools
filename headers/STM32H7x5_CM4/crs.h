#pragma once 

/* --- CRS: CRS ----------------------------------------------------- */

/** @defgroup crs_registers CRS Register
@{*/

/** CRS_CR CRS control register **/
#define CRS_CR			MMIO32(CRS_BASE + 0x00)
/** CRS_CFGR This register can be written only when the frequency error counter is disabled (CEN bit is cleared in CRS_CR). When the counter is enabled, this register is write-protected. **/
#define CRS_CFGR			MMIO32(CRS_BASE + 0x04)
/** CRS_ISR CRS interrupt and status register **/
#define CRS_ISR			MMIO32(CRS_BASE + 0x08)
/** CRS_ICR CRS interrupt flag clear register **/
#define CRS_ICR			MMIO32(CRS_BASE + 0x0c)

/**@}*/


/** @defgroup crs_cr CR CRS control register
@{*/


#define CRS_CR_TRIM_SHIFT		8
#define CRS_CR_TRIM_MASK		0x3f
/** @defgroup crs_cr_trim TRIM HSI48 oscillator smooth trimming These bits provide a user-programmable trimming value to the HSI48 oscillator. They can be programmed to adjust to variations in voltage and temperature that influence the frequency of the HSI48. The default value is 32, which corresponds to the middle of the trimming interval. The trimming step is around 67 kHz between two consecutive TRIM steps. A higher TRIM value corresponds to a higher output frequency. When the AUTOTRIMEN bit is set, this field is controlled by hardware and is read-only.
@{*/
/**@}*/

/** CRS_CR_SWSYNC Generate software SYNC event This bit is set by software in order to generate a software SYNC event. It is automatically cleared by hardware. **/
#define CRS_CR_SWSYNC		(1 << 7)
/** CRS_CR_AUTOTRIMEN Automatic trimming enable This bit enables the automatic hardware adjustment of TRIM bits according to the measured frequency error between two SYNC events. If this bit is set, the TRIM bits are read-only. The TRIM value can be adjusted by hardware by one or two steps at a time, depending on the measured frequency error value. Refer to Section7.3.4: Frequency error evaluation and automatic trimming for more details. **/
#define CRS_CR_AUTOTRIMEN		(1 << 6)
/** CRS_CR_CEN Frequency error counter enable This bit enables the oscillator clock for the frequency error counter. When this bit is set, the CRS_CFGR register is write-protected and cannot be modified. **/
#define CRS_CR_CEN		(1 << 5)
/** CRS_CR_ESYNCIE Expected SYNC interrupt enable **/
#define CRS_CR_ESYNCIE		(1 << 3)
/** CRS_CR_ERRIE Synchronization or trimming error interrupt enable **/
#define CRS_CR_ERRIE		(1 << 2)
/** CRS_CR_SYNCWARNIE SYNC warning interrupt enable **/
#define CRS_CR_SYNCWARNIE		(1 << 1)
/** CRS_CR_SYNCOKIE SYNC event OK interrupt enable **/
#define CRS_CR_SYNCOKIE		(1 << 0)

/**@}*/

/** @defgroup crs_cfgr CFGR This register can be written only when the frequency error counter is disabled (CEN bit is cleared in CRS_CR). When the counter is enabled, this register is write-protected.
@{*/

/** CRS_CFGR_SYNCPOL SYNC polarity selection This bit is set and cleared by software to select the input polarity for the SYNC signal source. **/
#define CRS_CFGR_SYNCPOL		(1 << 31)

#define CRS_CFGR_SYNCSRC_SHIFT		28
#define CRS_CFGR_SYNCSRC_MASK		0x03
/** @defgroup crs_cfgr_syncsrc SYNCSRC SYNC signal source selection These bits are set and cleared by software to select the SYNC signal source. Note: When using USB LPM (Link Power Management) and the device is in Sleep mode, the periodic USB SOF will not be generated by the host. No SYNC signal will therefore be provided to the CRS to calibrate the HSI48 on the run. To guarantee the required clock precision after waking up from Sleep mode, the LSE or reference clock on the GPIOs should be used as SYNC signal.
@{*/
/**@}*/


#define CRS_CFGR_SYNCDIV_SHIFT		24
#define CRS_CFGR_SYNCDIV_MASK		0x07
/** @defgroup crs_cfgr_syncdiv SYNCDIV SYNC divider These bits are set and cleared by software to control the division factor of the SYNC signal.
@{*/
/**@}*/


#define CRS_CFGR_FELIM_SHIFT		16
#define CRS_CFGR_FELIM_MASK		0xff
/** @defgroup crs_cfgr_felim FELIM Frequency error limit FELIM contains the value to be used to evaluate the captured frequency error value latched in the FECAP[15:0] bits of the CRS_ISR register. Refer to Section7.3.4: Frequency error evaluation and automatic trimming for more details about FECAP evaluation.
@{*/
/**@}*/


#define CRS_CFGR_RELOAD_SHIFT		0
#define CRS_CFGR_RELOAD_MASK		0xffff
/** @defgroup crs_cfgr_reload RELOAD Counter reload value RELOAD is the value to be loaded in the frequency error counter with each SYNC event. Refer to Section7.3.3: Frequency error measurement for more details about counter behavior.
@{*/
/**@}*/


/**@}*/

/** @defgroup crs_isr ISR CRS interrupt and status register
@{*/


#define CRS_ISR_FECAP_SHIFT		16
#define CRS_ISR_FECAP_MASK		0xffff
/** @defgroup crs_isr_fecap FECAP Frequency error capture FECAP is the frequency error counter value latched in the time of the last SYNC event. Refer to Section7.3.4: Frequency error evaluation and automatic trimming for more details about FECAP usage.
@{*/
/**@}*/

/** CRS_ISR_FEDIR Frequency error direction FEDIR is the counting direction of the frequency error counter latched in the time of the last SYNC event. It shows whether the actual frequency is below or above the target. **/
#define CRS_ISR_FEDIR		(1 << 15)
/** CRS_ISR_TRIMOVF Trimming overflow or underflow This flag is set by hardware when the automatic trimming tries to over- or under-flow the TRIM value. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register. **/
#define CRS_ISR_TRIMOVF		(1 << 10)
/** CRS_ISR_SYNCMISS SYNC missed This flag is set by hardware when the frequency error counter reached value FELIM * 128 and no SYNC was detected, meaning either that a SYNC pulse was missed or that the frequency error is too big (internal frequency too high) to be compensated by adjusting the TRIM value, and that some other action should be taken. At this point, the frequency error counter is stopped (waiting for a next SYNC) and an interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register. **/
#define CRS_ISR_SYNCMISS		(1 << 9)
/** CRS_ISR_SYNCERR SYNC error This flag is set by hardware when the SYNC pulse arrives before the ESYNC event and the measured frequency error is greater than or equal to FELIM * 128. This means that the frequency error is too big (internal frequency too low) to be compensated by adjusting the TRIM value, and that some other action should be taken. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register. **/
#define CRS_ISR_SYNCERR		(1 << 8)
/** CRS_ISR_ESYNCF Expected SYNC flag This flag is set by hardware when the frequency error counter reached a zero value. An interrupt is generated if the ESYNCIE bit is set in the CRS_CR register. It is cleared by software by setting the ESYNCC bit in the CRS_ICR register. **/
#define CRS_ISR_ESYNCF		(1 << 3)
/** CRS_ISR_ERRF Error flag This flag is set by hardware in case of any synchronization or trimming error. It is the logical OR of the TRIMOVF, SYNCMISS and SYNCERR bits. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software in reaction to setting the ERRC bit in the CRS_ICR register, which clears the TRIMOVF, SYNCMISS and SYNCERR bits. **/
#define CRS_ISR_ERRF		(1 << 2)
/** CRS_ISR_SYNCWARNF SYNC warning flag This flag is set by hardware when the measured frequency error is greater than or equal to FELIM * 3, but smaller than FELIM * 128. This means that to compensate the frequency error, the TRIM value must be adjusted by two steps or more. An interrupt is generated if the SYNCWARNIE bit is set in the CRS_CR register. It is cleared by software by setting the SYNCWARNC bit in the CRS_ICR register. **/
#define CRS_ISR_SYNCWARNF		(1 << 1)
/** CRS_ISR_SYNCOKF SYNC event OK flag This flag is set by hardware when the measured frequency error is smaller than FELIM * 3. This means that either no adjustment of the TRIM value is needed or that an adjustment by one trimming step is enough to compensate the frequency error. An interrupt is generated if the SYNCOKIE bit is set in the CRS_CR register. It is cleared by software by setting the SYNCOKC bit in the CRS_ICR register. **/
#define CRS_ISR_SYNCOKF		(1 << 0)

/**@}*/

/** @defgroup crs_icr ICR CRS interrupt flag clear register
@{*/

/** CRS_ICR_ESYNCC Expected SYNC clear flag Writing 1 to this bit clears the ESYNCF flag in the CRS_ISR register. **/
#define CRS_ICR_ESYNCC		(1 << 3)
/** CRS_ICR_ERRC Error clear flag Writing 1 to this bit clears TRIMOVF, SYNCMISS and SYNCERR bits and consequently also the ERRF flag in the CRS_ISR register. **/
#define CRS_ICR_ERRC		(1 << 2)
/** CRS_ICR_SYNCWARNC SYNC warning clear flag Writing 1 to this bit clears the SYNCWARNF flag in the CRS_ISR register. **/
#define CRS_ICR_SYNCWARNC		(1 << 1)
/** CRS_ICR_SYNCOKC SYNC event OK clear flag Writing 1 to this bit clears the SYNCOKF flag in the CRS_ISR register. **/
#define CRS_ICR_SYNCOKC		(1 << 0)

/**@}*/
