#pragma once 

/* --- FDCAN: FDCAN ------------------------------------------------- */

/** @defgroup fdcan_registers FDCAN Register
@{*/

/** FDCAN_CREL FDCAN Core Release Register **/
#define FDCAN_CREL			MMIO32(FDCAN_BASE + 0x00)
/** FDCAN_ENDN FDCAN Core Release Register **/
#define FDCAN_ENDN			MMIO32(FDCAN_BASE + 0x04)
/** FDCAN_DBTP This register is only writable if bits CCCR.CCE and CCCR.INIT are set. The CAN bit time may be programed in the range of 4 to 25 time quanta. The CAN time quantum may be programmed in the range of 1 to 1024 FDCAN clock periods. tq = (DBRP + 1) FDCAN clock period. DTSEG1 is the sum of Prop_Seg and Phase_Seg1. DTSEG2 is Phase_Seg2. Therefore the length of the bit time is (programmed values) [DTSEG1 + DTSEG2 + 3] tq or (functional values) [Sync_Seg + Prop_Seg + Phase_Seg1 + Phase_Seg2] tq. The Information Processing Time (IPT) is zero, meaning the data for the next bit is available at the first clock edge after the sample point. **/
#define FDCAN_DBTP			MMIO32(FDCAN_BASE + 0x0c)
/** FDCAN_TEST Write access to the Test Register has to be enabled by setting bit CCCR[TEST] to 1 . All Test Register functions are set to their reset values when bit CCCR[TEST] is reset. Loop Back mode and software control of Tx pin FDCANx_TX are hardware test modes. Programming TX differently from 00 may disturb the message transfer on the CAN bus. **/
#define FDCAN_TEST			MMIO32(FDCAN_BASE + 0x10)
/** FDCAN_RWD The RAM Watchdog monitors the READY output of the Message RAM. A Message RAM access starts the Message RAM Watchdog Counter with the value configured by the RWD[WDC] bits. The counter is reloaded with RWD[WDC] bits when the Message RAM signals successful completion by activating its READY output. In case there is no response from the Message RAM until the counter has counted down to 0, the counter stops and interrupt flag IR[WDI] bit is set. The RAM Watchdog Counter is clocked by the fdcan_pclk clock. **/
#define FDCAN_RWD			MMIO32(FDCAN_BASE + 0x14)
/** FDCAN_CCCR For details about setting and resetting of single bits see Software initialization. **/
#define FDCAN_CCCR			MMIO32(FDCAN_BASE + 0x18)
/** FDCAN_NBTP FDCAN_NBTP **/
#define FDCAN_NBTP			MMIO32(FDCAN_BASE + 0x1c)
/** FDCAN_TSCC FDCAN Timestamp Counter Configuration Register **/
#define FDCAN_TSCC			MMIO32(FDCAN_BASE + 0x20)
/** FDCAN_TSCV FDCAN Timestamp Counter Value Register **/
#define FDCAN_TSCV			MMIO32(FDCAN_BASE + 0x24)
/** FDCAN_TOCC FDCAN Timeout Counter Configuration Register **/
#define FDCAN_TOCC			MMIO32(FDCAN_BASE + 0x28)
/** FDCAN_TOCV FDCAN Timeout Counter Value Register **/
#define FDCAN_TOCV			MMIO32(FDCAN_BASE + 0x2c)
/** FDCAN_ECR FDCAN Error Counter Register **/
#define FDCAN_ECR			MMIO32(FDCAN_BASE + 0x40)
/** FDCAN_PSR FDCAN Protocol Status Register **/
#define FDCAN_PSR			MMIO32(FDCAN_BASE + 0x44)
/** FDCAN_TDCR FDCAN Transmitter Delay Compensation Register **/
#define FDCAN_TDCR			MMIO32(FDCAN_BASE + 0x48)
/** FDCAN_IR The flags are set when one of the listed conditions is detected (edge-sensitive). The flags remain set until the Host clears them. A flag is cleared by writing a 1 to the corresponding bit position. Writing a 0 has no effect. A hard reset will clear the register. The configuration of IE controls whether an interrupt is generated. The configuration of ILS controls on which interrupt line an interrupt is signaled. **/
#define FDCAN_IR			MMIO32(FDCAN_BASE + 0x50)
/** FDCAN_IE The settings in the Interrupt Enable register determine which status changes in the Interrupt Register will be signaled on an interrupt line. **/
#define FDCAN_IE			MMIO32(FDCAN_BASE + 0x54)
/** FDCAN_ILS The Interrupt Line Select register assigns an interrupt generated by a specific interrupt flag from the Interrupt Register to one of the two module interrupt lines. For interrupt generation the respective interrupt line has to be enabled via ILE[EINT0] and ILE[EINT1]. **/
#define FDCAN_ILS			MMIO32(FDCAN_BASE + 0x58)
/** FDCAN_ILE Each of the two interrupt lines to the CPU can be enabled/disabled separately by programming bits EINT0 and EINT1. **/
#define FDCAN_ILE			MMIO32(FDCAN_BASE + 0x5c)
/** FDCAN_RXGFC Global settings for Message ID filtering. The Global Filter Configuration controls the filter path for standard and extended messages as described in Figure706: Standard Message ID filter path and Figure707: Extended Message ID filter path. **/
#define FDCAN_RXGFC			MMIO32(FDCAN_BASE + 0x80)
/** FDCAN_XIDAM FDCAN Extended ID and Mask Register **/
#define FDCAN_XIDAM			MMIO32(FDCAN_BASE + 0x84)
/** FDCAN_HPMS This register is updated every time a Message ID filter element configured to generate a priority event match. This can be used to monitor the status of incoming high priority messages and to enable fast access to these messages. **/
#define FDCAN_HPMS			MMIO32(FDCAN_BASE + 0x88)
/** FDCAN_RXF0S FDCAN Rx FIFO 0 Status Register **/
#define FDCAN_RXF0S			MMIO32(FDCAN_BASE + 0x90)
/** FDCAN_RXF0A CAN Rx FIFO 0 Acknowledge Register **/
#define FDCAN_RXF0A			MMIO32(FDCAN_BASE + 0x94)
/** FDCAN_RXF1S FDCAN Rx FIFO 1 Status Register **/
#define FDCAN_RXF1S			MMIO32(FDCAN_BASE + 0x98)
/** FDCAN_RXF1A FDCAN Rx FIFO 1 Acknowledge Register **/
#define FDCAN_RXF1A			MMIO32(FDCAN_BASE + 0x9c)
/** FDCAN_TXBC FDCAN Tx Buffer Configuration Register **/
#define FDCAN_TXBC			MMIO32(FDCAN_BASE + 0xc0)
/** FDCAN_TXFQS The Tx FIFO/Queue status is related to the pending Tx requests listed in register TXBRP. Therefore the effect of Add/Cancellation requests may be delayed due to a running Tx scan (TXBRP not yet updated). **/
#define FDCAN_TXFQS			MMIO32(FDCAN_BASE + 0xc4)
/** FDCAN_TXBRP FDCAN Tx Buffer Request Pending Register **/
#define FDCAN_TXBRP			MMIO32(FDCAN_BASE + 0xc8)
/** FDCAN_TXBAR FDCAN Tx Buffer Add Request Register **/
#define FDCAN_TXBAR			MMIO32(FDCAN_BASE + 0xcc)
/** FDCAN_TXBCR FDCAN Tx Buffer Cancellation Request Register **/
#define FDCAN_TXBCR			MMIO32(FDCAN_BASE + 0xd0)
/** FDCAN_TXBTO FDCAN Tx Buffer Transmission Occurred Register **/
#define FDCAN_TXBTO			MMIO32(FDCAN_BASE + 0xd4)
/** FDCAN_TXBCF FDCAN Tx Buffer Cancellation Finished Register **/
#define FDCAN_TXBCF			MMIO32(FDCAN_BASE + 0xd8)
/** FDCAN_TXBTIE FDCAN Tx Buffer Transmission Interrupt Enable Register **/
#define FDCAN_TXBTIE			MMIO32(FDCAN_BASE + 0xdc)
/** FDCAN_TXBCIE FDCAN Tx Buffer Cancellation Finished Interrupt Enable Register **/
#define FDCAN_TXBCIE			MMIO32(FDCAN_BASE + 0xe0)
/** FDCAN_TXEFS FDCAN Tx Event FIFO Status Register **/
#define FDCAN_TXEFS			MMIO32(FDCAN_BASE + 0xe4)
/** FDCAN_TXEFA FDCAN Tx Event FIFO Acknowledge Register **/
#define FDCAN_TXEFA			MMIO32(FDCAN_BASE + 0xe8)
/** FDCAN_CKDIV FDCAN CFG clock divider register **/
#define FDCAN_CKDIV			MMIO32(FDCAN_BASE + 0x100)

/**@}*/


/** @defgroup fdcan_crel CREL FDCAN Core Release Register
@{*/


#define FDCAN_CREL_REL_SHIFT		28
#define FDCAN_CREL_REL_MASK		0x0f
/** @defgroup fdcan_crel_rel REL REL
@{*/
/**@}*/


#define FDCAN_CREL_STEP_SHIFT		24
#define FDCAN_CREL_STEP_MASK		0x0f
/** @defgroup fdcan_crel_step STEP STEP
@{*/
/**@}*/


#define FDCAN_CREL_SUBSTEP_SHIFT		20
#define FDCAN_CREL_SUBSTEP_MASK		0x0f
/** @defgroup fdcan_crel_substep SUBSTEP SUBSTEP
@{*/
/**@}*/


#define FDCAN_CREL_YEAR_SHIFT		16
#define FDCAN_CREL_YEAR_MASK		0x0f
/** @defgroup fdcan_crel_year YEAR YEAR
@{*/
/**@}*/


#define FDCAN_CREL_MON_SHIFT		8
#define FDCAN_CREL_MON_MASK		0xff
/** @defgroup fdcan_crel_mon MON MON
@{*/
/**@}*/


#define FDCAN_CREL_DAY_SHIFT		0
#define FDCAN_CREL_DAY_MASK		0xff
/** @defgroup fdcan_crel_day DAY DAY
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_endn ENDN FDCAN Core Release Register
@{*/


#define FDCAN_ENDN_ETV_SHIFT		0
#define FDCAN_ENDN_ETV_MASK		0xffffffff
/** @defgroup fdcan_endn_etv ETV ETV
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_dbtp DBTP This register is only writable if bits CCCR.CCE and CCCR.INIT are set. The CAN bit time may be programed in the range of 4 to 25 time quanta. The CAN time quantum may be programmed in the range of 1 to 1024 FDCAN clock periods. tq = (DBRP + 1) FDCAN clock period. DTSEG1 is the sum of Prop_Seg and Phase_Seg1. DTSEG2 is Phase_Seg2. Therefore the length of the bit time is (programmed values) [DTSEG1 + DTSEG2 + 3] tq or (functional values) [Sync_Seg + Prop_Seg + Phase_Seg1 + Phase_Seg2] tq. The Information Processing Time (IPT) is zero, meaning the data for the next bit is available at the first clock edge after the sample point.
@{*/

/** FDCAN_DBTP_TDC TDC **/
#define FDCAN_DBTP_TDC		(1 << 23)

#define FDCAN_DBTP_DBRP_SHIFT		16
#define FDCAN_DBTP_DBRP_MASK		0x1f
/** @defgroup fdcan_dbtp_dbrp DBRP DBRP
@{*/
/**@}*/


#define FDCAN_DBTP_DTSEG1_SHIFT		8
#define FDCAN_DBTP_DTSEG1_MASK		0x1f
/** @defgroup fdcan_dbtp_dtseg1 DTSEG1 DTSEG1
@{*/
/**@}*/


#define FDCAN_DBTP_DTSEG2_SHIFT		4
#define FDCAN_DBTP_DTSEG2_MASK		0x0f
/** @defgroup fdcan_dbtp_dtseg2 DTSEG2 DTSEG2
@{*/
/**@}*/


#define FDCAN_DBTP_DSJW_SHIFT		0
#define FDCAN_DBTP_DSJW_MASK		0x0f
/** @defgroup fdcan_dbtp_dsjw DSJW DSJW
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_test TEST Write access to the Test Register has to be enabled by setting bit CCCR[TEST] to 1 . All Test Register functions are set to their reset values when bit CCCR[TEST] is reset. Loop Back mode and software control of Tx pin FDCANx_TX are hardware test modes. Programming TX differently from 00 may disturb the message transfer on the CAN bus.
@{*/

/** FDCAN_TEST_RX RX **/
#define FDCAN_TEST_RX		(1 << 7)

#define FDCAN_TEST_TX_SHIFT		5
#define FDCAN_TEST_TX_MASK		0x03
/** @defgroup fdcan_test_tx TX TX
@{*/
/**@}*/

/** FDCAN_TEST_LBCK LBCK **/
#define FDCAN_TEST_LBCK		(1 << 4)

/**@}*/

/** @defgroup fdcan_rwd RWD The RAM Watchdog monitors the READY output of the Message RAM. A Message RAM access starts the Message RAM Watchdog Counter with the value configured by the RWD[WDC] bits. The counter is reloaded with RWD[WDC] bits when the Message RAM signals successful completion by activating its READY output. In case there is no response from the Message RAM until the counter has counted down to 0, the counter stops and interrupt flag IR[WDI] bit is set. The RAM Watchdog Counter is clocked by the fdcan_pclk clock.
@{*/


#define FDCAN_RWD_WDV_SHIFT		8
#define FDCAN_RWD_WDV_MASK		0xff
/** @defgroup fdcan_rwd_wdv WDV WDV
@{*/
/**@}*/


#define FDCAN_RWD_WDC_SHIFT		0
#define FDCAN_RWD_WDC_MASK		0xff
/** @defgroup fdcan_rwd_wdc WDC WDC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_cccr CCCR For details about setting and resetting of single bits see Software initialization.
@{*/

/** FDCAN_CCCR_NISO NISO **/
#define FDCAN_CCCR_NISO		(1 << 15)
/** FDCAN_CCCR_TXP TXP **/
#define FDCAN_CCCR_TXP		(1 << 14)
/** FDCAN_CCCR_EFBI EFBI **/
#define FDCAN_CCCR_EFBI		(1 << 13)
/** FDCAN_CCCR_PXHD PXHD **/
#define FDCAN_CCCR_PXHD		(1 << 12)
/** FDCAN_CCCR_BRSE BRSE **/
#define FDCAN_CCCR_BRSE		(1 << 9)
/** FDCAN_CCCR_FDOE FDOE **/
#define FDCAN_CCCR_FDOE		(1 << 8)
/** FDCAN_CCCR_TEST TEST **/
#define FDCAN_CCCR_TEST		(1 << 7)
/** FDCAN_CCCR_DAR DAR **/
#define FDCAN_CCCR_DAR		(1 << 6)
/** FDCAN_CCCR_MON MON **/
#define FDCAN_CCCR_MON		(1 << 5)
/** FDCAN_CCCR_CSR CSR **/
#define FDCAN_CCCR_CSR		(1 << 4)
/** FDCAN_CCCR_CSA CSA **/
#define FDCAN_CCCR_CSA		(1 << 3)
/** FDCAN_CCCR_ASM ASM **/
#define FDCAN_CCCR_ASM		(1 << 2)
/** FDCAN_CCCR_CCE CCE **/
#define FDCAN_CCCR_CCE		(1 << 1)
/** FDCAN_CCCR_INIT INIT **/
#define FDCAN_CCCR_INIT		(1 << 0)

/**@}*/

/** @defgroup fdcan_nbtp NBTP FDCAN_NBTP
@{*/


#define FDCAN_NBTP_NSJW_SHIFT		25
#define FDCAN_NBTP_NSJW_MASK		0x7f
/** @defgroup fdcan_nbtp_nsjw NSJW NSJW
@{*/
/**@}*/


#define FDCAN_NBTP_NBRP_SHIFT		16
#define FDCAN_NBTP_NBRP_MASK		0x1ff
/** @defgroup fdcan_nbtp_nbrp NBRP NBRP
@{*/
/**@}*/


#define FDCAN_NBTP_NTSEG1_SHIFT		8
#define FDCAN_NBTP_NTSEG1_MASK		0xff
/** @defgroup fdcan_nbtp_ntseg1 NTSEG1 NTSEG1
@{*/
/**@}*/


#define FDCAN_NBTP_TSEG2_SHIFT		0
#define FDCAN_NBTP_TSEG2_MASK		0x7f
/** @defgroup fdcan_nbtp_tseg2 TSEG2 TSEG2
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_tscc TSCC FDCAN Timestamp Counter Configuration Register
@{*/


#define FDCAN_TSCC_TCP_SHIFT		16
#define FDCAN_TSCC_TCP_MASK		0x0f
/** @defgroup fdcan_tscc_tcp TCP TCP
@{*/
/**@}*/


#define FDCAN_TSCC_TSS_SHIFT		0
#define FDCAN_TSCC_TSS_MASK		0x03
/** @defgroup fdcan_tscc_tss TSS TSS
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_tscv TSCV FDCAN Timestamp Counter Value Register
@{*/


#define FDCAN_TSCV_TSC_SHIFT		0
#define FDCAN_TSCV_TSC_MASK		0xffff
/** @defgroup fdcan_tscv_tsc TSC TSC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_tocc TOCC FDCAN Timeout Counter Configuration Register
@{*/


#define FDCAN_TOCC_TOP_SHIFT		16
#define FDCAN_TOCC_TOP_MASK		0xffff
/** @defgroup fdcan_tocc_top TOP TOP
@{*/
/**@}*/


#define FDCAN_TOCC_TOS_SHIFT		1
#define FDCAN_TOCC_TOS_MASK		0x03
/** @defgroup fdcan_tocc_tos TOS TOS
@{*/
/**@}*/

/** FDCAN_TOCC_ETOC ETOC **/
#define FDCAN_TOCC_ETOC		(1 << 0)

/**@}*/

/** @defgroup fdcan_tocv TOCV FDCAN Timeout Counter Value Register
@{*/


#define FDCAN_TOCV_TOC_SHIFT		0
#define FDCAN_TOCV_TOC_MASK		0xffff
/** @defgroup fdcan_tocv_toc TOC TOC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_ecr ECR FDCAN Error Counter Register
@{*/


#define FDCAN_ECR_CEL_SHIFT		16
#define FDCAN_ECR_CEL_MASK		0xff
/** @defgroup fdcan_ecr_cel CEL CEL
@{*/
/**@}*/

/** FDCAN_ECR_RP RP **/
#define FDCAN_ECR_RP		(1 << 15)

#define FDCAN_ECR_TREC_SHIFT		8
#define FDCAN_ECR_TREC_MASK		0x7f
/** @defgroup fdcan_ecr_trec TREC TREC
@{*/
/**@}*/


#define FDCAN_ECR_TEC_SHIFT		0
#define FDCAN_ECR_TEC_MASK		0xff
/** @defgroup fdcan_ecr_tec TEC TEC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_psr PSR FDCAN Protocol Status Register
@{*/


#define FDCAN_PSR_TDCV_SHIFT		16
#define FDCAN_PSR_TDCV_MASK		0x7f
/** @defgroup fdcan_psr_tdcv TDCV TDCV
@{*/
/**@}*/

/** FDCAN_PSR_PXE PXE **/
#define FDCAN_PSR_PXE		(1 << 14)
/** FDCAN_PSR_REDL REDL **/
#define FDCAN_PSR_REDL		(1 << 13)
/** FDCAN_PSR_RBRS RBRS **/
#define FDCAN_PSR_RBRS		(1 << 12)
/** FDCAN_PSR_RESI RESI **/
#define FDCAN_PSR_RESI		(1 << 11)

#define FDCAN_PSR_DLEC_SHIFT		8
#define FDCAN_PSR_DLEC_MASK		0x07
/** @defgroup fdcan_psr_dlec DLEC DLEC
@{*/
/**@}*/

/** FDCAN_PSR_BO BO **/
#define FDCAN_PSR_BO		(1 << 7)
/** FDCAN_PSR_EW EW **/
#define FDCAN_PSR_EW		(1 << 6)
/** FDCAN_PSR_EP EP **/
#define FDCAN_PSR_EP		(1 << 5)

#define FDCAN_PSR_ACT_SHIFT		3
#define FDCAN_PSR_ACT_MASK		0x03
/** @defgroup fdcan_psr_act ACT ACT
@{*/
/**@}*/


#define FDCAN_PSR_LEC_SHIFT		0
#define FDCAN_PSR_LEC_MASK		0x07
/** @defgroup fdcan_psr_lec LEC LEC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_tdcr TDCR FDCAN Transmitter Delay Compensation Register
@{*/


#define FDCAN_TDCR_TDCO_SHIFT		8
#define FDCAN_TDCR_TDCO_MASK		0x7f
/** @defgroup fdcan_tdcr_tdco TDCO TDCO
@{*/
/**@}*/


#define FDCAN_TDCR_TDCF_SHIFT		0
#define FDCAN_TDCR_TDCF_MASK		0x7f
/** @defgroup fdcan_tdcr_tdcf TDCF TDCF
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_ir IR The flags are set when one of the listed conditions is detected (edge-sensitive). The flags remain set until the Host clears them. A flag is cleared by writing a 1 to the corresponding bit position. Writing a 0 has no effect. A hard reset will clear the register. The configuration of IE controls whether an interrupt is generated. The configuration of ILS controls on which interrupt line an interrupt is signaled.
@{*/

/** FDCAN_IR_ARA ARA **/
#define FDCAN_IR_ARA		(1 << 29)
/** FDCAN_IR_PED PED **/
#define FDCAN_IR_PED		(1 << 28)
/** FDCAN_IR_PEA PEA **/
#define FDCAN_IR_PEA		(1 << 27)
/** FDCAN_IR_WDI WDI **/
#define FDCAN_IR_WDI		(1 << 26)
/** FDCAN_IR_BO BO **/
#define FDCAN_IR_BO		(1 << 25)
/** FDCAN_IR_EW EW **/
#define FDCAN_IR_EW		(1 << 24)
/** FDCAN_IR_EP EP **/
#define FDCAN_IR_EP		(1 << 23)
/** FDCAN_IR_ELO ELO **/
#define FDCAN_IR_ELO		(1 << 22)
/** FDCAN_IR_DRX DRX **/
#define FDCAN_IR_DRX		(1 << 19)
/** FDCAN_IR_TOO TOO **/
#define FDCAN_IR_TOO		(1 << 18)
/** FDCAN_IR_MRAF MRAF **/
#define FDCAN_IR_MRAF		(1 << 17)
/** FDCAN_IR_TSW TSW **/
#define FDCAN_IR_TSW		(1 << 16)
/** FDCAN_IR_TEFL TEFL **/
#define FDCAN_IR_TEFL		(1 << 15)
/** FDCAN_IR_TEFF TEFF **/
#define FDCAN_IR_TEFF		(1 << 14)
/** FDCAN_IR_TEFW TEFW **/
#define FDCAN_IR_TEFW		(1 << 13)
/** FDCAN_IR_TEFN TEFN **/
#define FDCAN_IR_TEFN		(1 << 12)
/** FDCAN_IR_TFE TFE **/
#define FDCAN_IR_TFE		(1 << 11)
/** FDCAN_IR_TCF TCF **/
#define FDCAN_IR_TCF		(1 << 10)
/** FDCAN_IR_TC TC **/
#define FDCAN_IR_TC		(1 << 9)
/** FDCAN_IR_HPM HPM **/
#define FDCAN_IR_HPM		(1 << 8)
/** FDCAN_IR_RF1L RF1L **/
#define FDCAN_IR_RF1L		(1 << 7)
/** FDCAN_IR_RF1F RF1F **/
#define FDCAN_IR_RF1F		(1 << 6)
/** FDCAN_IR_RF1W RF1W **/
#define FDCAN_IR_RF1W		(1 << 5)
/** FDCAN_IR_RF1N RF1N **/
#define FDCAN_IR_RF1N		(1 << 4)
/** FDCAN_IR_RF0L RF0L **/
#define FDCAN_IR_RF0L		(1 << 3)
/** FDCAN_IR_RF0F RF0F **/
#define FDCAN_IR_RF0F		(1 << 2)
/** FDCAN_IR_RF0W RF0W **/
#define FDCAN_IR_RF0W		(1 << 1)
/** FDCAN_IR_RF0N RF0N **/
#define FDCAN_IR_RF0N		(1 << 0)

/**@}*/

/** @defgroup fdcan_ie IE The settings in the Interrupt Enable register determine which status changes in the Interrupt Register will be signaled on an interrupt line.
@{*/

/** FDCAN_IE_ARAE ARAE **/
#define FDCAN_IE_ARAE		(1 << 29)
/** FDCAN_IE_PEDE PEDE **/
#define FDCAN_IE_PEDE		(1 << 28)
/** FDCAN_IE_PEAE PEAE **/
#define FDCAN_IE_PEAE		(1 << 27)
/** FDCAN_IE_WDIE WDIE **/
#define FDCAN_IE_WDIE		(1 << 26)
/** FDCAN_IE_BOE BOE **/
#define FDCAN_IE_BOE		(1 << 25)
/** FDCAN_IE_EWE EWE **/
#define FDCAN_IE_EWE		(1 << 24)
/** FDCAN_IE_EPE EPE **/
#define FDCAN_IE_EPE		(1 << 23)
/** FDCAN_IE_ELOE ELOE **/
#define FDCAN_IE_ELOE		(1 << 22)
/** FDCAN_IE_BEUE BEUE **/
#define FDCAN_IE_BEUE		(1 << 21)
/** FDCAN_IE_BECE BECE **/
#define FDCAN_IE_BECE		(1 << 20)
/** FDCAN_IE_DRX DRX **/
#define FDCAN_IE_DRX		(1 << 19)
/** FDCAN_IE_TOOE TOOE **/
#define FDCAN_IE_TOOE		(1 << 18)
/** FDCAN_IE_MRAFE MRAFE **/
#define FDCAN_IE_MRAFE		(1 << 17)
/** FDCAN_IE_TSWE TSWE **/
#define FDCAN_IE_TSWE		(1 << 16)
/** FDCAN_IE_TEFLE TEFLE **/
#define FDCAN_IE_TEFLE		(1 << 15)
/** FDCAN_IE_TEFFE TEFFE **/
#define FDCAN_IE_TEFFE		(1 << 14)
/** FDCAN_IE_TEFWE TEFWE **/
#define FDCAN_IE_TEFWE		(1 << 13)
/** FDCAN_IE_TEFNE TEFNE **/
#define FDCAN_IE_TEFNE		(1 << 12)
/** FDCAN_IE_TFEE TFEE **/
#define FDCAN_IE_TFEE		(1 << 11)
/** FDCAN_IE_TCFE TCFE **/
#define FDCAN_IE_TCFE		(1 << 10)
/** FDCAN_IE_TCE TCE **/
#define FDCAN_IE_TCE		(1 << 9)
/** FDCAN_IE_HPME HPME **/
#define FDCAN_IE_HPME		(1 << 8)
/** FDCAN_IE_RF1LE RF1LE **/
#define FDCAN_IE_RF1LE		(1 << 7)
/** FDCAN_IE_RF1FE RF1FE **/
#define FDCAN_IE_RF1FE		(1 << 6)
/** FDCAN_IE_RF1WE RF1WE **/
#define FDCAN_IE_RF1WE		(1 << 5)
/** FDCAN_IE_RF1NE RF1NE **/
#define FDCAN_IE_RF1NE		(1 << 4)
/** FDCAN_IE_RF0LE RF0LE **/
#define FDCAN_IE_RF0LE		(1 << 3)
/** FDCAN_IE_RF0FE RF0FE **/
#define FDCAN_IE_RF0FE		(1 << 2)
/** FDCAN_IE_RF0WE RF0WE **/
#define FDCAN_IE_RF0WE		(1 << 1)
/** FDCAN_IE_RF0NE RF0NE **/
#define FDCAN_IE_RF0NE		(1 << 0)

/**@}*/

/** @defgroup fdcan_ils ILS The Interrupt Line Select register assigns an interrupt generated by a specific interrupt flag from the Interrupt Register to one of the two module interrupt lines. For interrupt generation the respective interrupt line has to be enabled via ILE[EINT0] and ILE[EINT1].
@{*/

/** FDCAN_ILS_ARAL ARAL **/
#define FDCAN_ILS_ARAL		(1 << 29)
/** FDCAN_ILS_PEDL PEDL **/
#define FDCAN_ILS_PEDL		(1 << 28)
/** FDCAN_ILS_PEAL PEAL **/
#define FDCAN_ILS_PEAL		(1 << 27)
/** FDCAN_ILS_WDIL WDIL **/
#define FDCAN_ILS_WDIL		(1 << 26)
/** FDCAN_ILS_BOL BOL **/
#define FDCAN_ILS_BOL		(1 << 25)
/** FDCAN_ILS_EWL EWL **/
#define FDCAN_ILS_EWL		(1 << 24)
/** FDCAN_ILS_EPL EPL **/
#define FDCAN_ILS_EPL		(1 << 23)
/** FDCAN_ILS_ELOL ELOL **/
#define FDCAN_ILS_ELOL		(1 << 22)
/** FDCAN_ILS_BEUL BEUL **/
#define FDCAN_ILS_BEUL		(1 << 21)
/** FDCAN_ILS_BECL BECL **/
#define FDCAN_ILS_BECL		(1 << 20)
/** FDCAN_ILS_DRXL DRXL **/
#define FDCAN_ILS_DRXL		(1 << 19)
/** FDCAN_ILS_TOOL TOOL **/
#define FDCAN_ILS_TOOL		(1 << 18)
/** FDCAN_ILS_MRAFL MRAFL **/
#define FDCAN_ILS_MRAFL		(1 << 17)
/** FDCAN_ILS_TSWL TSWL **/
#define FDCAN_ILS_TSWL		(1 << 16)
/** FDCAN_ILS_TEFLL TEFLL **/
#define FDCAN_ILS_TEFLL		(1 << 15)
/** FDCAN_ILS_TEFFL TEFFL **/
#define FDCAN_ILS_TEFFL		(1 << 14)
/** FDCAN_ILS_TEFWL TEFWL **/
#define FDCAN_ILS_TEFWL		(1 << 13)
/** FDCAN_ILS_TEFNL TEFNL **/
#define FDCAN_ILS_TEFNL		(1 << 12)
/** FDCAN_ILS_TFEL TFEL **/
#define FDCAN_ILS_TFEL		(1 << 11)
/** FDCAN_ILS_TCFL TCFL **/
#define FDCAN_ILS_TCFL		(1 << 10)
/** FDCAN_ILS_TCL TCL **/
#define FDCAN_ILS_TCL		(1 << 9)
/** FDCAN_ILS_HPML HPML **/
#define FDCAN_ILS_HPML		(1 << 8)
/** FDCAN_ILS_RF1LL RF1LL **/
#define FDCAN_ILS_RF1LL		(1 << 7)
/** FDCAN_ILS_RF1FL RF1FL **/
#define FDCAN_ILS_RF1FL		(1 << 6)
/** FDCAN_ILS_RF1WL RF1WL **/
#define FDCAN_ILS_RF1WL		(1 << 5)
/** FDCAN_ILS_RF1NL RF1NL **/
#define FDCAN_ILS_RF1NL		(1 << 4)
/** FDCAN_ILS_RF0LL RF0LL **/
#define FDCAN_ILS_RF0LL		(1 << 3)
/** FDCAN_ILS_RF0FL RF0FL **/
#define FDCAN_ILS_RF0FL		(1 << 2)
/** FDCAN_ILS_RF0WL RF0WL **/
#define FDCAN_ILS_RF0WL		(1 << 1)
/** FDCAN_ILS_RF0NL RF0NL **/
#define FDCAN_ILS_RF0NL		(1 << 0)

/**@}*/

/** @defgroup fdcan_ile ILE Each of the two interrupt lines to the CPU can be enabled/disabled separately by programming bits EINT0 and EINT1.
@{*/

/** FDCAN_ILE_EINT1 EINT1 **/
#define FDCAN_ILE_EINT1		(1 << 1)
/** FDCAN_ILE_EINT0 EINT0 **/
#define FDCAN_ILE_EINT0		(1 << 0)

/**@}*/

/** @defgroup fdcan_rxgfc RXGFC Global settings for Message ID filtering. The Global Filter Configuration controls the filter path for standard and extended messages as described in Figure706: Standard Message ID filter path and Figure707: Extended Message ID filter path.
@{*/


#define FDCAN_RXGFC_ANFS_SHIFT		4
#define FDCAN_RXGFC_ANFS_MASK		0x03
/** @defgroup fdcan_rxgfc_anfs ANFS ANFS
@{*/
/**@}*/


#define FDCAN_RXGFC_ANFE_SHIFT		2
#define FDCAN_RXGFC_ANFE_MASK		0x03
/** @defgroup fdcan_rxgfc_anfe ANFE ANFE
@{*/
/**@}*/

/** FDCAN_RXGFC_RRFS RRFS **/
#define FDCAN_RXGFC_RRFS		(1 << 1)
/** FDCAN_RXGFC_RRFE RRFE **/
#define FDCAN_RXGFC_RRFE		(1 << 0)

/**@}*/

/** @defgroup fdcan_xidam XIDAM FDCAN Extended ID and Mask Register
@{*/


#define FDCAN_XIDAM_EIDM_SHIFT		0
#define FDCAN_XIDAM_EIDM_MASK		0x1fffffff
/** @defgroup fdcan_xidam_eidm EIDM EIDM
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_hpms HPMS This register is updated every time a Message ID filter element configured to generate a priority event match. This can be used to monitor the status of incoming high priority messages and to enable fast access to these messages.
@{*/

/** FDCAN_HPMS_FLST FLST **/
#define FDCAN_HPMS_FLST		(1 << 15)

#define FDCAN_HPMS_FIDX_SHIFT		8
#define FDCAN_HPMS_FIDX_MASK		0x7f
/** @defgroup fdcan_hpms_fidx FIDX FIDX
@{*/
/**@}*/


#define FDCAN_HPMS_MSI_SHIFT		6
#define FDCAN_HPMS_MSI_MASK		0x03
/** @defgroup fdcan_hpms_msi MSI MSI
@{*/
/**@}*/


#define FDCAN_HPMS_BIDX_SHIFT		0
#define FDCAN_HPMS_BIDX_MASK		0x3f
/** @defgroup fdcan_hpms_bidx BIDX BIDX
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_rxf0s RXF0S FDCAN Rx FIFO 0 Status Register
@{*/

/** FDCAN_RXF0S_RF0L RF0L **/
#define FDCAN_RXF0S_RF0L		(1 << 25)
/** FDCAN_RXF0S_F0F F0F **/
#define FDCAN_RXF0S_F0F		(1 << 24)

#define FDCAN_RXF0S_F0PI_SHIFT		16
#define FDCAN_RXF0S_F0PI_MASK		0x3f
/** @defgroup fdcan_rxf0s_f0pi F0PI F0PI
@{*/
/**@}*/


#define FDCAN_RXF0S_F0GI_SHIFT		8
#define FDCAN_RXF0S_F0GI_MASK		0x3f
/** @defgroup fdcan_rxf0s_f0gi F0GI F0GI
@{*/
/**@}*/


#define FDCAN_RXF0S_F0FL_SHIFT		0
#define FDCAN_RXF0S_F0FL_MASK		0x7f
/** @defgroup fdcan_rxf0s_f0fl F0FL F0FL
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_rxf0a RXF0A CAN Rx FIFO 0 Acknowledge Register
@{*/


#define FDCAN_RXF0A_F0AI_SHIFT		0
#define FDCAN_RXF0A_F0AI_MASK		0x3f
/** @defgroup fdcan_rxf0a_f0ai F0AI F0AI
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_rxf1s RXF1S FDCAN Rx FIFO 1 Status Register
@{*/


#define FDCAN_RXF1S_DMS_SHIFT		30
#define FDCAN_RXF1S_DMS_MASK		0x03
/** @defgroup fdcan_rxf1s_dms DMS DMS
@{*/
/**@}*/

/** FDCAN_RXF1S_RF1L RF1L **/
#define FDCAN_RXF1S_RF1L		(1 << 25)
/** FDCAN_RXF1S_F1F F1F **/
#define FDCAN_RXF1S_F1F		(1 << 24)

#define FDCAN_RXF1S_F1PI_SHIFT		16
#define FDCAN_RXF1S_F1PI_MASK		0x3f
/** @defgroup fdcan_rxf1s_f1pi F1PI F1PI
@{*/
/**@}*/


#define FDCAN_RXF1S_F1GI_SHIFT		8
#define FDCAN_RXF1S_F1GI_MASK		0x3f
/** @defgroup fdcan_rxf1s_f1gi F1GI F1GI
@{*/
/**@}*/


#define FDCAN_RXF1S_F1FL_SHIFT		0
#define FDCAN_RXF1S_F1FL_MASK		0x7f
/** @defgroup fdcan_rxf1s_f1fl F1FL F1FL
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_rxf1a RXF1A FDCAN Rx FIFO 1 Acknowledge Register
@{*/


#define FDCAN_RXF1A_F1AI_SHIFT		0
#define FDCAN_RXF1A_F1AI_MASK		0x3f
/** @defgroup fdcan_rxf1a_f1ai F1AI F1AI
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txbc TXBC FDCAN Tx Buffer Configuration Register
@{*/

/** FDCAN_TXBC_TFQM TFQM **/
#define FDCAN_TXBC_TFQM		(1 << 30)

#define FDCAN_TXBC_TFQS_SHIFT		24
#define FDCAN_TXBC_TFQS_MASK		0x3f
/** @defgroup fdcan_txbc_tfqs TFQS TFQS
@{*/
/**@}*/


#define FDCAN_TXBC_NDTB_SHIFT		16
#define FDCAN_TXBC_NDTB_MASK		0x3f
/** @defgroup fdcan_txbc_ndtb NDTB NDTB
@{*/
/**@}*/


#define FDCAN_TXBC_TBSA_SHIFT		2
#define FDCAN_TXBC_TBSA_MASK		0x3fff
/** @defgroup fdcan_txbc_tbsa TBSA TBSA
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txfqs TXFQS The Tx FIFO/Queue status is related to the pending Tx requests listed in register TXBRP. Therefore the effect of Add/Cancellation requests may be delayed due to a running Tx scan (TXBRP not yet updated).
@{*/

/** FDCAN_TXFQS_TFQF TFQF **/
#define FDCAN_TXFQS_TFQF		(1 << 21)

#define FDCAN_TXFQS_TFQPI_SHIFT		16
#define FDCAN_TXFQS_TFQPI_MASK		0x1f
/** @defgroup fdcan_txfqs_tfqpi TFQPI TFQPI
@{*/
/**@}*/


#define FDCAN_TXFQS_TFGI_SHIFT		8
#define FDCAN_TXFQS_TFGI_MASK		0x1f
/** @defgroup fdcan_txfqs_tfgi TFGI TFGI
@{*/
/**@}*/


#define FDCAN_TXFQS_TFFL_SHIFT		0
#define FDCAN_TXFQS_TFFL_MASK		0x3f
/** @defgroup fdcan_txfqs_tffl TFFL TFFL
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txbrp TXBRP FDCAN Tx Buffer Request Pending Register
@{*/


#define FDCAN_TXBRP_TRP_SHIFT		0
#define FDCAN_TXBRP_TRP_MASK		0xffffffff
/** @defgroup fdcan_txbrp_trp TRP TRP
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txbar TXBAR FDCAN Tx Buffer Add Request Register
@{*/


#define FDCAN_TXBAR_AR_SHIFT		0
#define FDCAN_TXBAR_AR_MASK		0xffffffff
/** @defgroup fdcan_txbar_ar AR AR
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txbcr TXBCR FDCAN Tx Buffer Cancellation Request Register
@{*/


#define FDCAN_TXBCR_CR_SHIFT		0
#define FDCAN_TXBCR_CR_MASK		0xffffffff
/** @defgroup fdcan_txbcr_cr CR CR
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txbto TXBTO FDCAN Tx Buffer Transmission Occurred Register
@{*/


#define FDCAN_TXBTO_TO_SHIFT		0
#define FDCAN_TXBTO_TO_MASK		0xffffffff
/** @defgroup fdcan_txbto_to TO TO
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txbcf TXBCF FDCAN Tx Buffer Cancellation Finished Register
@{*/


#define FDCAN_TXBCF_CF_SHIFT		0
#define FDCAN_TXBCF_CF_MASK		0xffffffff
/** @defgroup fdcan_txbcf_cf CF CF
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txbtie TXBTIE FDCAN Tx Buffer Transmission Interrupt Enable Register
@{*/


#define FDCAN_TXBTIE_TIE_SHIFT		0
#define FDCAN_TXBTIE_TIE_MASK		0xffffffff
/** @defgroup fdcan_txbtie_tie TIE TIE
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txbcie TXBCIE FDCAN Tx Buffer Cancellation Finished Interrupt Enable Register
@{*/


#define FDCAN_TXBCIE_CFIE_SHIFT		0
#define FDCAN_TXBCIE_CFIE_MASK		0xffffffff
/** @defgroup fdcan_txbcie_cfie CFIE CFIE
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txefs TXEFS FDCAN Tx Event FIFO Status Register
@{*/

/** FDCAN_TXEFS_TEFL TEFL **/
#define FDCAN_TXEFS_TEFL		(1 << 25)
/** FDCAN_TXEFS_EFF EFF **/
#define FDCAN_TXEFS_EFF		(1 << 24)

#define FDCAN_TXEFS_EFPI_SHIFT		16
#define FDCAN_TXEFS_EFPI_MASK		0x1f
/** @defgroup fdcan_txefs_efpi EFPI EFPI
@{*/
/**@}*/


#define FDCAN_TXEFS_EFGI_SHIFT		8
#define FDCAN_TXEFS_EFGI_MASK		0x1f
/** @defgroup fdcan_txefs_efgi EFGI EFGI
@{*/
/**@}*/


#define FDCAN_TXEFS_EFFL_SHIFT		0
#define FDCAN_TXEFS_EFFL_MASK		0x3f
/** @defgroup fdcan_txefs_effl EFFL EFFL
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_txefa TXEFA FDCAN Tx Event FIFO Acknowledge Register
@{*/


#define FDCAN_TXEFA_EFAI_SHIFT		0
#define FDCAN_TXEFA_EFAI_MASK		0x1f
/** @defgroup fdcan_txefa_efai EFAI EFAI
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan_ckdiv CKDIV FDCAN CFG clock divider register
@{*/


#define FDCAN_CKDIV_PDIV_SHIFT		0
#define FDCAN_CKDIV_PDIV_MASK		0x0f
/** @defgroup fdcan_ckdiv_pdiv PDIV input clock divider. the APB clock could be divided prior to be used by the CAN sub
@{*/
/**@}*/


/**@}*/
