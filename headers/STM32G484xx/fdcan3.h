#pragma once 

/* --- FDCAN3: FDCAN ------------------------------------------------ */

/** @defgroup fdcan3_registers FDCAN Register
@{*/

/** FDCAN3_CREL FDCAN Core Release Register **/
#define FDCAN3_CREL			MMIO32(FDCAN3_BASE + 0x00)
/** FDCAN3_ENDN FDCAN Core Release Register **/
#define FDCAN3_ENDN			MMIO32(FDCAN3_BASE + 0x04)
/** FDCAN3_DBTP This register is only writable if bits CCCR.CCE and CCCR.INIT are set. The CAN bit time may be programed in the range of 4 to 25 time quanta. The CAN time quantum may be programmed in the range of 1 to 1024 FDCAN clock periods. tq = (DBRP + 1) FDCAN clock period. DTSEG1 is the sum of Prop_Seg and Phase_Seg1. DTSEG2 is Phase_Seg2. Therefore the length of the bit time is (programmed values) [DTSEG1 + DTSEG2 + 3] tq or (functional values) [Sync_Seg + Prop_Seg + Phase_Seg1 + Phase_Seg2] tq. The Information Processing Time (IPT) is zero, meaning the data for the next bit is available at the first clock edge after the sample point. **/
#define FDCAN3_DBTP			MMIO32(FDCAN3_BASE + 0x0c)
/** FDCAN3_TEST Write access to the Test Register has to be enabled by setting bit CCCR[TEST] to 1 . All Test Register functions are set to their reset values when bit CCCR[TEST] is reset. Loop Back mode and software control of Tx pin FDCANx_TX are hardware test modes. Programming TX differently from 00 may disturb the message transfer on the CAN bus. **/
#define FDCAN3_TEST			MMIO32(FDCAN3_BASE + 0x10)
/** FDCAN3_RWD The RAM Watchdog monitors the READY output of the Message RAM. A Message RAM access starts the Message RAM Watchdog Counter with the value configured by the RWD[WDC] bits. The counter is reloaded with RWD[WDC] bits when the Message RAM signals successful completion by activating its READY output. In case there is no response from the Message RAM until the counter has counted down to 0, the counter stops and interrupt flag IR[WDI] bit is set. The RAM Watchdog Counter is clocked by the fdcan_pclk clock. **/
#define FDCAN3_RWD			MMIO32(FDCAN3_BASE + 0x14)
/** FDCAN3_CCCR For details about setting and resetting of single bits see Software initialization. **/
#define FDCAN3_CCCR			MMIO32(FDCAN3_BASE + 0x18)
/** FDCAN3_NBTP FDCAN_NBTP **/
#define FDCAN3_NBTP			MMIO32(FDCAN3_BASE + 0x1c)
/** FDCAN3_TSCC FDCAN Timestamp Counter Configuration Register **/
#define FDCAN3_TSCC			MMIO32(FDCAN3_BASE + 0x20)
/** FDCAN3_TSCV FDCAN Timestamp Counter Value Register **/
#define FDCAN3_TSCV			MMIO32(FDCAN3_BASE + 0x24)
/** FDCAN3_TOCC FDCAN Timeout Counter Configuration Register **/
#define FDCAN3_TOCC			MMIO32(FDCAN3_BASE + 0x28)
/** FDCAN3_TOCV FDCAN Timeout Counter Value Register **/
#define FDCAN3_TOCV			MMIO32(FDCAN3_BASE + 0x2c)
/** FDCAN3_ECR FDCAN Error Counter Register **/
#define FDCAN3_ECR			MMIO32(FDCAN3_BASE + 0x40)
/** FDCAN3_PSR FDCAN Protocol Status Register **/
#define FDCAN3_PSR			MMIO32(FDCAN3_BASE + 0x44)
/** FDCAN3_TDCR FDCAN Transmitter Delay Compensation Register **/
#define FDCAN3_TDCR			MMIO32(FDCAN3_BASE + 0x48)
/** FDCAN3_IR The flags are set when one of the listed conditions is detected (edge-sensitive). The flags remain set until the Host clears them. A flag is cleared by writing a 1 to the corresponding bit position. Writing a 0 has no effect. A hard reset will clear the register. The configuration of IE controls whether an interrupt is generated. The configuration of ILS controls on which interrupt line an interrupt is signaled. **/
#define FDCAN3_IR			MMIO32(FDCAN3_BASE + 0x50)
/** FDCAN3_IE The settings in the Interrupt Enable register determine which status changes in the Interrupt Register will be signaled on an interrupt line. **/
#define FDCAN3_IE			MMIO32(FDCAN3_BASE + 0x54)
/** FDCAN3_ILS The Interrupt Line Select register assigns an interrupt generated by a specific interrupt flag from the Interrupt Register to one of the two module interrupt lines. For interrupt generation the respective interrupt line has to be enabled via ILE[EINT0] and ILE[EINT1]. **/
#define FDCAN3_ILS			MMIO32(FDCAN3_BASE + 0x58)
/** FDCAN3_ILE Each of the two interrupt lines to the CPU can be enabled/disabled separately by programming bits EINT0 and EINT1. **/
#define FDCAN3_ILE			MMIO32(FDCAN3_BASE + 0x5c)
/** FDCAN3_RXGFC Global settings for Message ID filtering. The Global Filter Configuration controls the filter path for standard and extended messages as described in Figure706: Standard Message ID filter path and Figure707: Extended Message ID filter path. **/
#define FDCAN3_RXGFC			MMIO32(FDCAN3_BASE + 0x80)
/** FDCAN3_XIDAM FDCAN Extended ID and Mask Register **/
#define FDCAN3_XIDAM			MMIO32(FDCAN3_BASE + 0x84)
/** FDCAN3_HPMS This register is updated every time a Message ID filter element configured to generate a priority event match. This can be used to monitor the status of incoming high priority messages and to enable fast access to these messages. **/
#define FDCAN3_HPMS			MMIO32(FDCAN3_BASE + 0x88)
/** FDCAN3_RXF0S FDCAN Rx FIFO 0 Status Register **/
#define FDCAN3_RXF0S			MMIO32(FDCAN3_BASE + 0x90)
/** FDCAN3_RXF0A CAN Rx FIFO 0 Acknowledge Register **/
#define FDCAN3_RXF0A			MMIO32(FDCAN3_BASE + 0x94)
/** FDCAN3_RXF1S FDCAN Rx FIFO 1 Status Register **/
#define FDCAN3_RXF1S			MMIO32(FDCAN3_BASE + 0x98)
/** FDCAN3_RXF1A FDCAN Rx FIFO 1 Acknowledge Register **/
#define FDCAN3_RXF1A			MMIO32(FDCAN3_BASE + 0x9c)
/** FDCAN3_TXBC FDCAN Tx Buffer Configuration Register **/
#define FDCAN3_TXBC			MMIO32(FDCAN3_BASE + 0xc0)
/** FDCAN3_TXFQS The Tx FIFO/Queue status is related to the pending Tx requests listed in register TXBRP. Therefore the effect of Add/Cancellation requests may be delayed due to a running Tx scan (TXBRP not yet updated). **/
#define FDCAN3_TXFQS			MMIO32(FDCAN3_BASE + 0xc4)
/** FDCAN3_TXBRP FDCAN Tx Buffer Request Pending Register **/
#define FDCAN3_TXBRP			MMIO32(FDCAN3_BASE + 0xc8)
/** FDCAN3_TXBAR FDCAN Tx Buffer Add Request Register **/
#define FDCAN3_TXBAR			MMIO32(FDCAN3_BASE + 0xcc)
/** FDCAN3_TXBCR FDCAN Tx Buffer Cancellation Request Register **/
#define FDCAN3_TXBCR			MMIO32(FDCAN3_BASE + 0xd0)
/** FDCAN3_TXBTO FDCAN Tx Buffer Transmission Occurred Register **/
#define FDCAN3_TXBTO			MMIO32(FDCAN3_BASE + 0xd4)
/** FDCAN3_TXBCF FDCAN Tx Buffer Cancellation Finished Register **/
#define FDCAN3_TXBCF			MMIO32(FDCAN3_BASE + 0xd8)
/** FDCAN3_TXBTIE FDCAN Tx Buffer Transmission Interrupt Enable Register **/
#define FDCAN3_TXBTIE			MMIO32(FDCAN3_BASE + 0xdc)
/** FDCAN3_TXBCIE FDCAN Tx Buffer Cancellation Finished Interrupt Enable Register **/
#define FDCAN3_TXBCIE			MMIO32(FDCAN3_BASE + 0xe0)
/** FDCAN3_TXEFS FDCAN Tx Event FIFO Status Register **/
#define FDCAN3_TXEFS			MMIO32(FDCAN3_BASE + 0xe4)
/** FDCAN3_TXEFA FDCAN Tx Event FIFO Acknowledge Register **/
#define FDCAN3_TXEFA			MMIO32(FDCAN3_BASE + 0xe8)
/** FDCAN3_CKDIV FDCAN CFG clock divider register **/
#define FDCAN3_CKDIV			MMIO32(FDCAN3_BASE + 0x100)

/**@}*/


/** @defgroup fdcan3_crel CREL FDCAN Core Release Register
@{*/


#define FDCAN3_CREL_REL_SHIFT		28
#define FDCAN3_CREL_REL_MASK		0x0f
/** @defgroup fdcan3_crel_rel REL REL
@{*/
/**@}*/


#define FDCAN3_CREL_STEP_SHIFT		24
#define FDCAN3_CREL_STEP_MASK		0x0f
/** @defgroup fdcan3_crel_step STEP STEP
@{*/
/**@}*/


#define FDCAN3_CREL_SUBSTEP_SHIFT		20
#define FDCAN3_CREL_SUBSTEP_MASK		0x0f
/** @defgroup fdcan3_crel_substep SUBSTEP SUBSTEP
@{*/
/**@}*/


#define FDCAN3_CREL_YEAR_SHIFT		16
#define FDCAN3_CREL_YEAR_MASK		0x0f
/** @defgroup fdcan3_crel_year YEAR YEAR
@{*/
/**@}*/


#define FDCAN3_CREL_MON_SHIFT		8
#define FDCAN3_CREL_MON_MASK		0xff
/** @defgroup fdcan3_crel_mon MON MON
@{*/
/**@}*/


#define FDCAN3_CREL_DAY_SHIFT		0
#define FDCAN3_CREL_DAY_MASK		0xff
/** @defgroup fdcan3_crel_day DAY DAY
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_endn ENDN FDCAN Core Release Register
@{*/


#define FDCAN3_ENDN_ETV_SHIFT		0
#define FDCAN3_ENDN_ETV_MASK		0xffffffff
/** @defgroup fdcan3_endn_etv ETV ETV
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_dbtp DBTP This register is only writable if bits CCCR.CCE and CCCR.INIT are set. The CAN bit time may be programed in the range of 4 to 25 time quanta. The CAN time quantum may be programmed in the range of 1 to 1024 FDCAN clock periods. tq = (DBRP + 1) FDCAN clock period. DTSEG1 is the sum of Prop_Seg and Phase_Seg1. DTSEG2 is Phase_Seg2. Therefore the length of the bit time is (programmed values) [DTSEG1 + DTSEG2 + 3] tq or (functional values) [Sync_Seg + Prop_Seg + Phase_Seg1 + Phase_Seg2] tq. The Information Processing Time (IPT) is zero, meaning the data for the next bit is available at the first clock edge after the sample point.
@{*/

/** FDCAN3_DBTP_TDC TDC **/
#define FDCAN3_DBTP_TDC		(1 << 23)

#define FDCAN3_DBTP_DBRP_SHIFT		16
#define FDCAN3_DBTP_DBRP_MASK		0x1f
/** @defgroup fdcan3_dbtp_dbrp DBRP DBRP
@{*/
/**@}*/


#define FDCAN3_DBTP_DTSEG1_SHIFT		8
#define FDCAN3_DBTP_DTSEG1_MASK		0x1f
/** @defgroup fdcan3_dbtp_dtseg1 DTSEG1 DTSEG1
@{*/
/**@}*/


#define FDCAN3_DBTP_DTSEG2_SHIFT		4
#define FDCAN3_DBTP_DTSEG2_MASK		0x0f
/** @defgroup fdcan3_dbtp_dtseg2 DTSEG2 DTSEG2
@{*/
/**@}*/


#define FDCAN3_DBTP_DSJW_SHIFT		0
#define FDCAN3_DBTP_DSJW_MASK		0x0f
/** @defgroup fdcan3_dbtp_dsjw DSJW DSJW
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_test TEST Write access to the Test Register has to be enabled by setting bit CCCR[TEST] to 1 . All Test Register functions are set to their reset values when bit CCCR[TEST] is reset. Loop Back mode and software control of Tx pin FDCANx_TX are hardware test modes. Programming TX differently from 00 may disturb the message transfer on the CAN bus.
@{*/

/** FDCAN3_TEST_RX RX **/
#define FDCAN3_TEST_RX		(1 << 7)

#define FDCAN3_TEST_TX_SHIFT		5
#define FDCAN3_TEST_TX_MASK		0x03
/** @defgroup fdcan3_test_tx TX TX
@{*/
/**@}*/

/** FDCAN3_TEST_LBCK LBCK **/
#define FDCAN3_TEST_LBCK		(1 << 4)

/**@}*/

/** @defgroup fdcan3_rwd RWD The RAM Watchdog monitors the READY output of the Message RAM. A Message RAM access starts the Message RAM Watchdog Counter with the value configured by the RWD[WDC] bits. The counter is reloaded with RWD[WDC] bits when the Message RAM signals successful completion by activating its READY output. In case there is no response from the Message RAM until the counter has counted down to 0, the counter stops and interrupt flag IR[WDI] bit is set. The RAM Watchdog Counter is clocked by the fdcan_pclk clock.
@{*/


#define FDCAN3_RWD_WDV_SHIFT		8
#define FDCAN3_RWD_WDV_MASK		0xff
/** @defgroup fdcan3_rwd_wdv WDV WDV
@{*/
/**@}*/


#define FDCAN3_RWD_WDC_SHIFT		0
#define FDCAN3_RWD_WDC_MASK		0xff
/** @defgroup fdcan3_rwd_wdc WDC WDC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_cccr CCCR For details about setting and resetting of single bits see Software initialization.
@{*/

/** FDCAN3_CCCR_NISO NISO **/
#define FDCAN3_CCCR_NISO		(1 << 15)
/** FDCAN3_CCCR_TXP TXP **/
#define FDCAN3_CCCR_TXP		(1 << 14)
/** FDCAN3_CCCR_EFBI EFBI **/
#define FDCAN3_CCCR_EFBI		(1 << 13)
/** FDCAN3_CCCR_PXHD PXHD **/
#define FDCAN3_CCCR_PXHD		(1 << 12)
/** FDCAN3_CCCR_BRSE BRSE **/
#define FDCAN3_CCCR_BRSE		(1 << 9)
/** FDCAN3_CCCR_FDOE FDOE **/
#define FDCAN3_CCCR_FDOE		(1 << 8)
/** FDCAN3_CCCR_TEST TEST **/
#define FDCAN3_CCCR_TEST		(1 << 7)
/** FDCAN3_CCCR_DAR DAR **/
#define FDCAN3_CCCR_DAR		(1 << 6)
/** FDCAN3_CCCR_MON MON **/
#define FDCAN3_CCCR_MON		(1 << 5)
/** FDCAN3_CCCR_CSR CSR **/
#define FDCAN3_CCCR_CSR		(1 << 4)
/** FDCAN3_CCCR_CSA CSA **/
#define FDCAN3_CCCR_CSA		(1 << 3)
/** FDCAN3_CCCR_ASM ASM **/
#define FDCAN3_CCCR_ASM		(1 << 2)
/** FDCAN3_CCCR_CCE CCE **/
#define FDCAN3_CCCR_CCE		(1 << 1)
/** FDCAN3_CCCR_INIT INIT **/
#define FDCAN3_CCCR_INIT		(1 << 0)

/**@}*/

/** @defgroup fdcan3_nbtp NBTP FDCAN_NBTP
@{*/


#define FDCAN3_NBTP_NSJW_SHIFT		25
#define FDCAN3_NBTP_NSJW_MASK		0x7f
/** @defgroup fdcan3_nbtp_nsjw NSJW NSJW
@{*/
/**@}*/


#define FDCAN3_NBTP_NBRP_SHIFT		16
#define FDCAN3_NBTP_NBRP_MASK		0x1ff
/** @defgroup fdcan3_nbtp_nbrp NBRP NBRP
@{*/
/**@}*/


#define FDCAN3_NBTP_NTSEG1_SHIFT		8
#define FDCAN3_NBTP_NTSEG1_MASK		0xff
/** @defgroup fdcan3_nbtp_ntseg1 NTSEG1 NTSEG1
@{*/
/**@}*/


#define FDCAN3_NBTP_TSEG2_SHIFT		0
#define FDCAN3_NBTP_TSEG2_MASK		0x7f
/** @defgroup fdcan3_nbtp_tseg2 TSEG2 TSEG2
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_tscc TSCC FDCAN Timestamp Counter Configuration Register
@{*/


#define FDCAN3_TSCC_TCP_SHIFT		16
#define FDCAN3_TSCC_TCP_MASK		0x0f
/** @defgroup fdcan3_tscc_tcp TCP TCP
@{*/
/**@}*/


#define FDCAN3_TSCC_TSS_SHIFT		0
#define FDCAN3_TSCC_TSS_MASK		0x03
/** @defgroup fdcan3_tscc_tss TSS TSS
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_tscv TSCV FDCAN Timestamp Counter Value Register
@{*/


#define FDCAN3_TSCV_TSC_SHIFT		0
#define FDCAN3_TSCV_TSC_MASK		0xffff
/** @defgroup fdcan3_tscv_tsc TSC TSC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_tocc TOCC FDCAN Timeout Counter Configuration Register
@{*/


#define FDCAN3_TOCC_TOP_SHIFT		16
#define FDCAN3_TOCC_TOP_MASK		0xffff
/** @defgroup fdcan3_tocc_top TOP TOP
@{*/
/**@}*/


#define FDCAN3_TOCC_TOS_SHIFT		1
#define FDCAN3_TOCC_TOS_MASK		0x03
/** @defgroup fdcan3_tocc_tos TOS TOS
@{*/
/**@}*/

/** FDCAN3_TOCC_ETOC ETOC **/
#define FDCAN3_TOCC_ETOC		(1 << 0)

/**@}*/

/** @defgroup fdcan3_tocv TOCV FDCAN Timeout Counter Value Register
@{*/


#define FDCAN3_TOCV_TOC_SHIFT		0
#define FDCAN3_TOCV_TOC_MASK		0xffff
/** @defgroup fdcan3_tocv_toc TOC TOC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_ecr ECR FDCAN Error Counter Register
@{*/


#define FDCAN3_ECR_CEL_SHIFT		16
#define FDCAN3_ECR_CEL_MASK		0xff
/** @defgroup fdcan3_ecr_cel CEL CEL
@{*/
/**@}*/

/** FDCAN3_ECR_RP RP **/
#define FDCAN3_ECR_RP		(1 << 15)

#define FDCAN3_ECR_TREC_SHIFT		8
#define FDCAN3_ECR_TREC_MASK		0x7f
/** @defgroup fdcan3_ecr_trec TREC TREC
@{*/
/**@}*/


#define FDCAN3_ECR_TEC_SHIFT		0
#define FDCAN3_ECR_TEC_MASK		0xff
/** @defgroup fdcan3_ecr_tec TEC TEC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_psr PSR FDCAN Protocol Status Register
@{*/


#define FDCAN3_PSR_TDCV_SHIFT		16
#define FDCAN3_PSR_TDCV_MASK		0x7f
/** @defgroup fdcan3_psr_tdcv TDCV TDCV
@{*/
/**@}*/

/** FDCAN3_PSR_PXE PXE **/
#define FDCAN3_PSR_PXE		(1 << 14)
/** FDCAN3_PSR_REDL REDL **/
#define FDCAN3_PSR_REDL		(1 << 13)
/** FDCAN3_PSR_RBRS RBRS **/
#define FDCAN3_PSR_RBRS		(1 << 12)
/** FDCAN3_PSR_RESI RESI **/
#define FDCAN3_PSR_RESI		(1 << 11)

#define FDCAN3_PSR_DLEC_SHIFT		8
#define FDCAN3_PSR_DLEC_MASK		0x07
/** @defgroup fdcan3_psr_dlec DLEC DLEC
@{*/
/**@}*/

/** FDCAN3_PSR_BO BO **/
#define FDCAN3_PSR_BO		(1 << 7)
/** FDCAN3_PSR_EW EW **/
#define FDCAN3_PSR_EW		(1 << 6)
/** FDCAN3_PSR_EP EP **/
#define FDCAN3_PSR_EP		(1 << 5)

#define FDCAN3_PSR_ACT_SHIFT		3
#define FDCAN3_PSR_ACT_MASK		0x03
/** @defgroup fdcan3_psr_act ACT ACT
@{*/
/**@}*/


#define FDCAN3_PSR_LEC_SHIFT		0
#define FDCAN3_PSR_LEC_MASK		0x07
/** @defgroup fdcan3_psr_lec LEC LEC
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_tdcr TDCR FDCAN Transmitter Delay Compensation Register
@{*/


#define FDCAN3_TDCR_TDCO_SHIFT		8
#define FDCAN3_TDCR_TDCO_MASK		0x7f
/** @defgroup fdcan3_tdcr_tdco TDCO TDCO
@{*/
/**@}*/


#define FDCAN3_TDCR_TDCF_SHIFT		0
#define FDCAN3_TDCR_TDCF_MASK		0x7f
/** @defgroup fdcan3_tdcr_tdcf TDCF TDCF
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_ir IR The flags are set when one of the listed conditions is detected (edge-sensitive). The flags remain set until the Host clears them. A flag is cleared by writing a 1 to the corresponding bit position. Writing a 0 has no effect. A hard reset will clear the register. The configuration of IE controls whether an interrupt is generated. The configuration of ILS controls on which interrupt line an interrupt is signaled.
@{*/

/** FDCAN3_IR_ARA ARA **/
#define FDCAN3_IR_ARA		(1 << 29)
/** FDCAN3_IR_PED PED **/
#define FDCAN3_IR_PED		(1 << 28)
/** FDCAN3_IR_PEA PEA **/
#define FDCAN3_IR_PEA		(1 << 27)
/** FDCAN3_IR_WDI WDI **/
#define FDCAN3_IR_WDI		(1 << 26)
/** FDCAN3_IR_BO BO **/
#define FDCAN3_IR_BO		(1 << 25)
/** FDCAN3_IR_EW EW **/
#define FDCAN3_IR_EW		(1 << 24)
/** FDCAN3_IR_EP EP **/
#define FDCAN3_IR_EP		(1 << 23)
/** FDCAN3_IR_ELO ELO **/
#define FDCAN3_IR_ELO		(1 << 22)
/** FDCAN3_IR_DRX DRX **/
#define FDCAN3_IR_DRX		(1 << 19)
/** FDCAN3_IR_TOO TOO **/
#define FDCAN3_IR_TOO		(1 << 18)
/** FDCAN3_IR_MRAF MRAF **/
#define FDCAN3_IR_MRAF		(1 << 17)
/** FDCAN3_IR_TSW TSW **/
#define FDCAN3_IR_TSW		(1 << 16)
/** FDCAN3_IR_TEFL TEFL **/
#define FDCAN3_IR_TEFL		(1 << 15)
/** FDCAN3_IR_TEFF TEFF **/
#define FDCAN3_IR_TEFF		(1 << 14)
/** FDCAN3_IR_TEFW TEFW **/
#define FDCAN3_IR_TEFW		(1 << 13)
/** FDCAN3_IR_TEFN TEFN **/
#define FDCAN3_IR_TEFN		(1 << 12)
/** FDCAN3_IR_TFE TFE **/
#define FDCAN3_IR_TFE		(1 << 11)
/** FDCAN3_IR_TCF TCF **/
#define FDCAN3_IR_TCF		(1 << 10)
/** FDCAN3_IR_TC TC **/
#define FDCAN3_IR_TC		(1 << 9)
/** FDCAN3_IR_HPM HPM **/
#define FDCAN3_IR_HPM		(1 << 8)
/** FDCAN3_IR_RF1L RF1L **/
#define FDCAN3_IR_RF1L		(1 << 7)
/** FDCAN3_IR_RF1F RF1F **/
#define FDCAN3_IR_RF1F		(1 << 6)
/** FDCAN3_IR_RF1W RF1W **/
#define FDCAN3_IR_RF1W		(1 << 5)
/** FDCAN3_IR_RF1N RF1N **/
#define FDCAN3_IR_RF1N		(1 << 4)
/** FDCAN3_IR_RF0L RF0L **/
#define FDCAN3_IR_RF0L		(1 << 3)
/** FDCAN3_IR_RF0F RF0F **/
#define FDCAN3_IR_RF0F		(1 << 2)
/** FDCAN3_IR_RF0W RF0W **/
#define FDCAN3_IR_RF0W		(1 << 1)
/** FDCAN3_IR_RF0N RF0N **/
#define FDCAN3_IR_RF0N		(1 << 0)

/**@}*/

/** @defgroup fdcan3_ie IE The settings in the Interrupt Enable register determine which status changes in the Interrupt Register will be signaled on an interrupt line.
@{*/

/** FDCAN3_IE_ARAE ARAE **/
#define FDCAN3_IE_ARAE		(1 << 29)
/** FDCAN3_IE_PEDE PEDE **/
#define FDCAN3_IE_PEDE		(1 << 28)
/** FDCAN3_IE_PEAE PEAE **/
#define FDCAN3_IE_PEAE		(1 << 27)
/** FDCAN3_IE_WDIE WDIE **/
#define FDCAN3_IE_WDIE		(1 << 26)
/** FDCAN3_IE_BOE BOE **/
#define FDCAN3_IE_BOE		(1 << 25)
/** FDCAN3_IE_EWE EWE **/
#define FDCAN3_IE_EWE		(1 << 24)
/** FDCAN3_IE_EPE EPE **/
#define FDCAN3_IE_EPE		(1 << 23)
/** FDCAN3_IE_ELOE ELOE **/
#define FDCAN3_IE_ELOE		(1 << 22)
/** FDCAN3_IE_BEUE BEUE **/
#define FDCAN3_IE_BEUE		(1 << 21)
/** FDCAN3_IE_BECE BECE **/
#define FDCAN3_IE_BECE		(1 << 20)
/** FDCAN3_IE_DRX DRX **/
#define FDCAN3_IE_DRX		(1 << 19)
/** FDCAN3_IE_TOOE TOOE **/
#define FDCAN3_IE_TOOE		(1 << 18)
/** FDCAN3_IE_MRAFE MRAFE **/
#define FDCAN3_IE_MRAFE		(1 << 17)
/** FDCAN3_IE_TSWE TSWE **/
#define FDCAN3_IE_TSWE		(1 << 16)
/** FDCAN3_IE_TEFLE TEFLE **/
#define FDCAN3_IE_TEFLE		(1 << 15)
/** FDCAN3_IE_TEFFE TEFFE **/
#define FDCAN3_IE_TEFFE		(1 << 14)
/** FDCAN3_IE_TEFWE TEFWE **/
#define FDCAN3_IE_TEFWE		(1 << 13)
/** FDCAN3_IE_TEFNE TEFNE **/
#define FDCAN3_IE_TEFNE		(1 << 12)
/** FDCAN3_IE_TFEE TFEE **/
#define FDCAN3_IE_TFEE		(1 << 11)
/** FDCAN3_IE_TCFE TCFE **/
#define FDCAN3_IE_TCFE		(1 << 10)
/** FDCAN3_IE_TCE TCE **/
#define FDCAN3_IE_TCE		(1 << 9)
/** FDCAN3_IE_HPME HPME **/
#define FDCAN3_IE_HPME		(1 << 8)
/** FDCAN3_IE_RF1LE RF1LE **/
#define FDCAN3_IE_RF1LE		(1 << 7)
/** FDCAN3_IE_RF1FE RF1FE **/
#define FDCAN3_IE_RF1FE		(1 << 6)
/** FDCAN3_IE_RF1WE RF1WE **/
#define FDCAN3_IE_RF1WE		(1 << 5)
/** FDCAN3_IE_RF1NE RF1NE **/
#define FDCAN3_IE_RF1NE		(1 << 4)
/** FDCAN3_IE_RF0LE RF0LE **/
#define FDCAN3_IE_RF0LE		(1 << 3)
/** FDCAN3_IE_RF0FE RF0FE **/
#define FDCAN3_IE_RF0FE		(1 << 2)
/** FDCAN3_IE_RF0WE RF0WE **/
#define FDCAN3_IE_RF0WE		(1 << 1)
/** FDCAN3_IE_RF0NE RF0NE **/
#define FDCAN3_IE_RF0NE		(1 << 0)

/**@}*/

/** @defgroup fdcan3_ils ILS The Interrupt Line Select register assigns an interrupt generated by a specific interrupt flag from the Interrupt Register to one of the two module interrupt lines. For interrupt generation the respective interrupt line has to be enabled via ILE[EINT0] and ILE[EINT1].
@{*/

/** FDCAN3_ILS_ARAL ARAL **/
#define FDCAN3_ILS_ARAL		(1 << 29)
/** FDCAN3_ILS_PEDL PEDL **/
#define FDCAN3_ILS_PEDL		(1 << 28)
/** FDCAN3_ILS_PEAL PEAL **/
#define FDCAN3_ILS_PEAL		(1 << 27)
/** FDCAN3_ILS_WDIL WDIL **/
#define FDCAN3_ILS_WDIL		(1 << 26)
/** FDCAN3_ILS_BOL BOL **/
#define FDCAN3_ILS_BOL		(1 << 25)
/** FDCAN3_ILS_EWL EWL **/
#define FDCAN3_ILS_EWL		(1 << 24)
/** FDCAN3_ILS_EPL EPL **/
#define FDCAN3_ILS_EPL		(1 << 23)
/** FDCAN3_ILS_ELOL ELOL **/
#define FDCAN3_ILS_ELOL		(1 << 22)
/** FDCAN3_ILS_BEUL BEUL **/
#define FDCAN3_ILS_BEUL		(1 << 21)
/** FDCAN3_ILS_BECL BECL **/
#define FDCAN3_ILS_BECL		(1 << 20)
/** FDCAN3_ILS_DRXL DRXL **/
#define FDCAN3_ILS_DRXL		(1 << 19)
/** FDCAN3_ILS_TOOL TOOL **/
#define FDCAN3_ILS_TOOL		(1 << 18)
/** FDCAN3_ILS_MRAFL MRAFL **/
#define FDCAN3_ILS_MRAFL		(1 << 17)
/** FDCAN3_ILS_TSWL TSWL **/
#define FDCAN3_ILS_TSWL		(1 << 16)
/** FDCAN3_ILS_TEFLL TEFLL **/
#define FDCAN3_ILS_TEFLL		(1 << 15)
/** FDCAN3_ILS_TEFFL TEFFL **/
#define FDCAN3_ILS_TEFFL		(1 << 14)
/** FDCAN3_ILS_TEFWL TEFWL **/
#define FDCAN3_ILS_TEFWL		(1 << 13)
/** FDCAN3_ILS_TEFNL TEFNL **/
#define FDCAN3_ILS_TEFNL		(1 << 12)
/** FDCAN3_ILS_TFEL TFEL **/
#define FDCAN3_ILS_TFEL		(1 << 11)
/** FDCAN3_ILS_TCFL TCFL **/
#define FDCAN3_ILS_TCFL		(1 << 10)
/** FDCAN3_ILS_TCL TCL **/
#define FDCAN3_ILS_TCL		(1 << 9)
/** FDCAN3_ILS_HPML HPML **/
#define FDCAN3_ILS_HPML		(1 << 8)
/** FDCAN3_ILS_RF1LL RF1LL **/
#define FDCAN3_ILS_RF1LL		(1 << 7)
/** FDCAN3_ILS_RF1FL RF1FL **/
#define FDCAN3_ILS_RF1FL		(1 << 6)
/** FDCAN3_ILS_RF1WL RF1WL **/
#define FDCAN3_ILS_RF1WL		(1 << 5)
/** FDCAN3_ILS_RF1NL RF1NL **/
#define FDCAN3_ILS_RF1NL		(1 << 4)
/** FDCAN3_ILS_RF0LL RF0LL **/
#define FDCAN3_ILS_RF0LL		(1 << 3)
/** FDCAN3_ILS_RF0FL RF0FL **/
#define FDCAN3_ILS_RF0FL		(1 << 2)
/** FDCAN3_ILS_RF0WL RF0WL **/
#define FDCAN3_ILS_RF0WL		(1 << 1)
/** FDCAN3_ILS_RF0NL RF0NL **/
#define FDCAN3_ILS_RF0NL		(1 << 0)

/**@}*/

/** @defgroup fdcan3_ile ILE Each of the two interrupt lines to the CPU can be enabled/disabled separately by programming bits EINT0 and EINT1.
@{*/

/** FDCAN3_ILE_EINT1 EINT1 **/
#define FDCAN3_ILE_EINT1		(1 << 1)
/** FDCAN3_ILE_EINT0 EINT0 **/
#define FDCAN3_ILE_EINT0		(1 << 0)

/**@}*/

/** @defgroup fdcan3_rxgfc RXGFC Global settings for Message ID filtering. The Global Filter Configuration controls the filter path for standard and extended messages as described in Figure706: Standard Message ID filter path and Figure707: Extended Message ID filter path.
@{*/


#define FDCAN3_RXGFC_ANFS_SHIFT		4
#define FDCAN3_RXGFC_ANFS_MASK		0x03
/** @defgroup fdcan3_rxgfc_anfs ANFS ANFS
@{*/
/**@}*/


#define FDCAN3_RXGFC_ANFE_SHIFT		2
#define FDCAN3_RXGFC_ANFE_MASK		0x03
/** @defgroup fdcan3_rxgfc_anfe ANFE ANFE
@{*/
/**@}*/

/** FDCAN3_RXGFC_RRFS RRFS **/
#define FDCAN3_RXGFC_RRFS		(1 << 1)
/** FDCAN3_RXGFC_RRFE RRFE **/
#define FDCAN3_RXGFC_RRFE		(1 << 0)

/**@}*/

/** @defgroup fdcan3_xidam XIDAM FDCAN Extended ID and Mask Register
@{*/


#define FDCAN3_XIDAM_EIDM_SHIFT		0
#define FDCAN3_XIDAM_EIDM_MASK		0x1fffffff
/** @defgroup fdcan3_xidam_eidm EIDM EIDM
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_hpms HPMS This register is updated every time a Message ID filter element configured to generate a priority event match. This can be used to monitor the status of incoming high priority messages and to enable fast access to these messages.
@{*/

/** FDCAN3_HPMS_FLST FLST **/
#define FDCAN3_HPMS_FLST		(1 << 15)

#define FDCAN3_HPMS_FIDX_SHIFT		8
#define FDCAN3_HPMS_FIDX_MASK		0x7f
/** @defgroup fdcan3_hpms_fidx FIDX FIDX
@{*/
/**@}*/


#define FDCAN3_HPMS_MSI_SHIFT		6
#define FDCAN3_HPMS_MSI_MASK		0x03
/** @defgroup fdcan3_hpms_msi MSI MSI
@{*/
/**@}*/


#define FDCAN3_HPMS_BIDX_SHIFT		0
#define FDCAN3_HPMS_BIDX_MASK		0x3f
/** @defgroup fdcan3_hpms_bidx BIDX BIDX
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_rxf0s RXF0S FDCAN Rx FIFO 0 Status Register
@{*/

/** FDCAN3_RXF0S_RF0L RF0L **/
#define FDCAN3_RXF0S_RF0L		(1 << 25)
/** FDCAN3_RXF0S_F0F F0F **/
#define FDCAN3_RXF0S_F0F		(1 << 24)

#define FDCAN3_RXF0S_F0PI_SHIFT		16
#define FDCAN3_RXF0S_F0PI_MASK		0x3f
/** @defgroup fdcan3_rxf0s_f0pi F0PI F0PI
@{*/
/**@}*/


#define FDCAN3_RXF0S_F0GI_SHIFT		8
#define FDCAN3_RXF0S_F0GI_MASK		0x3f
/** @defgroup fdcan3_rxf0s_f0gi F0GI F0GI
@{*/
/**@}*/


#define FDCAN3_RXF0S_F0FL_SHIFT		0
#define FDCAN3_RXF0S_F0FL_MASK		0x7f
/** @defgroup fdcan3_rxf0s_f0fl F0FL F0FL
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_rxf0a RXF0A CAN Rx FIFO 0 Acknowledge Register
@{*/


#define FDCAN3_RXF0A_F0AI_SHIFT		0
#define FDCAN3_RXF0A_F0AI_MASK		0x3f
/** @defgroup fdcan3_rxf0a_f0ai F0AI F0AI
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_rxf1s RXF1S FDCAN Rx FIFO 1 Status Register
@{*/


#define FDCAN3_RXF1S_DMS_SHIFT		30
#define FDCAN3_RXF1S_DMS_MASK		0x03
/** @defgroup fdcan3_rxf1s_dms DMS DMS
@{*/
/**@}*/

/** FDCAN3_RXF1S_RF1L RF1L **/
#define FDCAN3_RXF1S_RF1L		(1 << 25)
/** FDCAN3_RXF1S_F1F F1F **/
#define FDCAN3_RXF1S_F1F		(1 << 24)

#define FDCAN3_RXF1S_F1PI_SHIFT		16
#define FDCAN3_RXF1S_F1PI_MASK		0x3f
/** @defgroup fdcan3_rxf1s_f1pi F1PI F1PI
@{*/
/**@}*/


#define FDCAN3_RXF1S_F1GI_SHIFT		8
#define FDCAN3_RXF1S_F1GI_MASK		0x3f
/** @defgroup fdcan3_rxf1s_f1gi F1GI F1GI
@{*/
/**@}*/


#define FDCAN3_RXF1S_F1FL_SHIFT		0
#define FDCAN3_RXF1S_F1FL_MASK		0x7f
/** @defgroup fdcan3_rxf1s_f1fl F1FL F1FL
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_rxf1a RXF1A FDCAN Rx FIFO 1 Acknowledge Register
@{*/


#define FDCAN3_RXF1A_F1AI_SHIFT		0
#define FDCAN3_RXF1A_F1AI_MASK		0x3f
/** @defgroup fdcan3_rxf1a_f1ai F1AI F1AI
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txbc TXBC FDCAN Tx Buffer Configuration Register
@{*/

/** FDCAN3_TXBC_TFQM TFQM **/
#define FDCAN3_TXBC_TFQM		(1 << 30)

#define FDCAN3_TXBC_TFQS_SHIFT		24
#define FDCAN3_TXBC_TFQS_MASK		0x3f
/** @defgroup fdcan3_txbc_tfqs TFQS TFQS
@{*/
/**@}*/


#define FDCAN3_TXBC_NDTB_SHIFT		16
#define FDCAN3_TXBC_NDTB_MASK		0x3f
/** @defgroup fdcan3_txbc_ndtb NDTB NDTB
@{*/
/**@}*/


#define FDCAN3_TXBC_TBSA_SHIFT		2
#define FDCAN3_TXBC_TBSA_MASK		0x3fff
/** @defgroup fdcan3_txbc_tbsa TBSA TBSA
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txfqs TXFQS The Tx FIFO/Queue status is related to the pending Tx requests listed in register TXBRP. Therefore the effect of Add/Cancellation requests may be delayed due to a running Tx scan (TXBRP not yet updated).
@{*/

/** FDCAN3_TXFQS_TFQF TFQF **/
#define FDCAN3_TXFQS_TFQF		(1 << 21)

#define FDCAN3_TXFQS_TFQPI_SHIFT		16
#define FDCAN3_TXFQS_TFQPI_MASK		0x1f
/** @defgroup fdcan3_txfqs_tfqpi TFQPI TFQPI
@{*/
/**@}*/


#define FDCAN3_TXFQS_TFGI_SHIFT		8
#define FDCAN3_TXFQS_TFGI_MASK		0x1f
/** @defgroup fdcan3_txfqs_tfgi TFGI TFGI
@{*/
/**@}*/


#define FDCAN3_TXFQS_TFFL_SHIFT		0
#define FDCAN3_TXFQS_TFFL_MASK		0x3f
/** @defgroup fdcan3_txfqs_tffl TFFL TFFL
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txbrp TXBRP FDCAN Tx Buffer Request Pending Register
@{*/


#define FDCAN3_TXBRP_TRP_SHIFT		0
#define FDCAN3_TXBRP_TRP_MASK		0xffffffff
/** @defgroup fdcan3_txbrp_trp TRP TRP
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txbar TXBAR FDCAN Tx Buffer Add Request Register
@{*/


#define FDCAN3_TXBAR_AR_SHIFT		0
#define FDCAN3_TXBAR_AR_MASK		0xffffffff
/** @defgroup fdcan3_txbar_ar AR AR
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txbcr TXBCR FDCAN Tx Buffer Cancellation Request Register
@{*/


#define FDCAN3_TXBCR_CR_SHIFT		0
#define FDCAN3_TXBCR_CR_MASK		0xffffffff
/** @defgroup fdcan3_txbcr_cr CR CR
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txbto TXBTO FDCAN Tx Buffer Transmission Occurred Register
@{*/


#define FDCAN3_TXBTO_TO_SHIFT		0
#define FDCAN3_TXBTO_TO_MASK		0xffffffff
/** @defgroup fdcan3_txbto_to TO TO
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txbcf TXBCF FDCAN Tx Buffer Cancellation Finished Register
@{*/


#define FDCAN3_TXBCF_CF_SHIFT		0
#define FDCAN3_TXBCF_CF_MASK		0xffffffff
/** @defgroup fdcan3_txbcf_cf CF CF
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txbtie TXBTIE FDCAN Tx Buffer Transmission Interrupt Enable Register
@{*/


#define FDCAN3_TXBTIE_TIE_SHIFT		0
#define FDCAN3_TXBTIE_TIE_MASK		0xffffffff
/** @defgroup fdcan3_txbtie_tie TIE TIE
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txbcie TXBCIE FDCAN Tx Buffer Cancellation Finished Interrupt Enable Register
@{*/


#define FDCAN3_TXBCIE_CFIE_SHIFT		0
#define FDCAN3_TXBCIE_CFIE_MASK		0xffffffff
/** @defgroup fdcan3_txbcie_cfie CFIE CFIE
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txefs TXEFS FDCAN Tx Event FIFO Status Register
@{*/

/** FDCAN3_TXEFS_TEFL TEFL **/
#define FDCAN3_TXEFS_TEFL		(1 << 25)
/** FDCAN3_TXEFS_EFF EFF **/
#define FDCAN3_TXEFS_EFF		(1 << 24)

#define FDCAN3_TXEFS_EFPI_SHIFT		16
#define FDCAN3_TXEFS_EFPI_MASK		0x1f
/** @defgroup fdcan3_txefs_efpi EFPI EFPI
@{*/
/**@}*/


#define FDCAN3_TXEFS_EFGI_SHIFT		8
#define FDCAN3_TXEFS_EFGI_MASK		0x1f
/** @defgroup fdcan3_txefs_efgi EFGI EFGI
@{*/
/**@}*/


#define FDCAN3_TXEFS_EFFL_SHIFT		0
#define FDCAN3_TXEFS_EFFL_MASK		0x3f
/** @defgroup fdcan3_txefs_effl EFFL EFFL
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_txefa TXEFA FDCAN Tx Event FIFO Acknowledge Register
@{*/


#define FDCAN3_TXEFA_EFAI_SHIFT		0
#define FDCAN3_TXEFA_EFAI_MASK		0x1f
/** @defgroup fdcan3_txefa_efai EFAI EFAI
@{*/
/**@}*/


/**@}*/

/** @defgroup fdcan3_ckdiv CKDIV FDCAN CFG clock divider register
@{*/


#define FDCAN3_CKDIV_PDIV_SHIFT		0
#define FDCAN3_CKDIV_PDIV_MASK		0x0f
/** @defgroup fdcan3_ckdiv_pdiv PDIV input clock divider. the APB clock could be divided prior to be used by the CAN sub
@{*/
/**@}*/


/**@}*/
